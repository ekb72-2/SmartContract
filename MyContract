pragma solidity^0.4.0;

library SafeMath {
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}
contract MyContract {
    address private admin;
    address owner;
    mapping (address=> uint) userBalances;
    using SafeMath for uint;
    
    function MyContract (){
       owner = msg.sender;
    }
    
    modifier onlyOwner {
        require (msg.sender == owner);
        _;
    }
   
    
    function add() payable onlyOwner private returns (bool) {
        userBalances [msg.sender] += msg.value;
    }
    
    function burn (uint amount) onlyOwner private{
        userBalances [msg.sender] -= msg.value;
    }
    function withdrawBalance () onlyOwner private {
        if(!(msg.sender.call.value (userBalances[msg.sender])() )){
            throw;
        }
        userBalances[msg.sender]= 0;
    }
  
